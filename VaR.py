# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XxMK9DIO_70Ygvswoz96WPVfdgwKtAyi
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import norm
import yfinance as yf

def download_stock_data(symbol):

    data = yf.download(symbol, auto_adjust=False)
    print("可用列:", list(data.columns))

    if 'Adj Close' in data.columns:
        return data['Adj Close']
    elif 'Close' in data.columns:
        return data['Close']
    else:
        raise KeyError(f"数据中缺少 'Adj Close' 和 'Close'，可用列为: {list(data.columns)}")

def compute_returns(price_series):
    """
    计算日收益率
    """
    return price_series.pct_change().dropna()

def percent_var(r, confidence=0.95):
    """
    计算基于分位数方法的 VaR
    """
    alpha = 1 - confidence
    var = np.percentile(r, alpha * 100)
    return abs(var)

def plot_histogram(r):
    """
    绘制收益率分布直方图
    """
    plt.hist(r, bins=50, alpha=0.75, color='blue', edgecolor='black')
    plt.xlabel("Daily Returns")
    plt.ylabel("Frequency")
    plt.title("Histogram of Daily Returns")
    plt.grid(True)
    plt.show()

symbol = "GS"
try:
    prices = download_stock_data(symbol)
    print(f"成功下载 {symbol} 数据，前5行:\n", prices.head())

    returns = compute_returns(prices)
    print(f"\n计算出的日收益率（前5行）：\n{returns.head()}")

    confidence_level = 0.95
    var_95 = percent_var(returns, confidence_level)
    print(f"\n{confidence_level * 100}% 置信区间下的 VaR: {var_95:.4f}")

    plot_histogram(returns)

except Exception as e:
    print("运行出错:", e)