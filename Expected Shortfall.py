# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MRBSBdZUTbeNy-jCKZfr0A17FE4TOL2R
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf

def download_stock_data(symbol):

    data = yf.download(symbol, auto_adjust=False)
    print("可用列:", list(data.columns))

    if 'Adj Close' in data.columns:
        return data['Adj Close']
    elif 'Close' in data.columns:
        return data['Close']
    else:
        raise KeyError(f"数据中缺少 'Adj Close' 和 'Close'，可用列为: {list(data.columns)}")

def compute_returns(price_series):

    return price_series.pct_change().dropna()

def value_at_risk(losses, confidence=0.95):

    alpha = 1 - confidence
    return np.percentile(losses, alpha * 100)

def expected_shortfall(losses, confidence=0.95, VaR=None):

    if VaR is None:
        VaR = value_at_risk(losses, confidence)

    es_value = np.mean(losses[losses < VaR])
    return es_value

def plot_histogram(r):

    plt.hist(r, bins=50, alpha=0.75, color='blue', edgecolor='black')
    plt.xlabel("Daily Returns")
    plt.ylabel("Frequency")
    plt.title("Histogram of Daily Returns")
    plt.grid(True)
    plt.show()

symbol = "GS"
try:
    prices = download_stock_data(symbol)
    print(f"成功下载 {symbol} 数据，前5行:\n", prices.head())

    returns = compute_returns(prices)
    print(f"\n计算出的日收益率（前5行）：\n{returns.head()}")

    confidence_level = 0.95
    var_95 = value_at_risk(returns, confidence_level)
    print(f"\n{confidence_level * 100}% 置信区间下的 VaR: {var_95:.4f}")

    es_95 = expected_shortfall(returns, confidence_level, var_95)
    print(f"\n{confidence_level * 100}% 置信区间下的 ES: {es_95:.4f}")

    plot_histogram(returns)

except Exception as e:
    print("运行出错:", e)